{"version":3,"sources":["sounds/success.mp3","sounds/fail.mp3","LetterRow.tsx","DictateRound.tsx","speech.tsx","WordRound.tsx","serviceWorker.js","index.tsx","App.tsx"],"names":["module","exports","LetterType","State","letterTypeToColor","type","Faded","Correct","Highlight","WordRow","word","Box","display","flexDirection","map","letter","index","key","paddingRight","Paper","elevation","width","height","textAlign","fontSize","lineHeight","color","undefined","char","SpeechContext","React","createContext","abc","split","WordRound","rate","blind","targetWord","sayWord","commonErrorWord","onSuccess","onFail","ref","useRef","useState","buffer","setBuffer","position","length","speechLang","useContext","useEffect","msg","SpeechSynthesisUtterance","voice","speechSynthesis","getVoices","find","lang","window","speak","cancel","current","filter","forEach","physicalKeyboard","handleHighlightKeyUp","code","handleHighlightKeyDown","onKey","includes","p","addEventListener","removeEventListener","highlightPosition","findIndex","targetChar","targetIndex","alignItems","margin","paddingTop","paddingX","alignSelf","keyboardRef","r","onChange","onKeyPress","successFx","require","failFx","stateMachine","Machine","id","initial","Play","context","states","on","success","fail","Fail","after","800","target","actions","Success","1000","DictateRound","inputSentences","sentences","originalArray","array","i","j","Math","floor","random","temp","shuffleArray","setI","sentance","useSound","playSuccess","playFail","useMachine","state","value","send","original","failWith","console","log","style","backgroundColor","justifyContent","Boolean","location","hostname","match","ReactDOM","render","payload","setPayload","setRate","dictate","setDictate","voices","setVoices","a","Promise","resolve","reject","synth","setInterval","clearInterval","v","name","setLang","line","sen","trim","toLocaleLowerCase","Provider","top","bottom","left","right","m","TextareaAutosize","e","Slider","event","newValue","defaultValue","aria-labelledby","valueLabelDisplay","step","min","max","Select","x","MenuItem","disabled","Button","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,2CCG/BC,E,4LAAAA,O,iBAAAA,I,qBAAAA,I,0BAAAA,M,KAeZ,I,ECLKC,EDKCC,EAAoB,SAACC,GACzB,OAAQA,GACN,KAAKH,EAAWI,MACd,MAAO,OACT,KAAKJ,EAAWK,QACd,MAAO,QACT,KAAKL,EAAWM,UACd,MAAO,QACT,QACE,MAAO,SAIAC,EAAU,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KACxB,OACE,kBAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,OAC/BH,EAAKI,KAAI,SAACC,EAAQC,GACjB,OACE,kBAACL,EAAA,EAAD,CAAKM,IAAKD,EAAOE,aAAa,OAC5B,kBAACC,EAAA,EAAD,CAAOC,UAAW,GAChB,kBAACT,EAAA,EAAD,CACEU,MAAM,OACNC,OAAO,OACPC,UAAU,SACVC,SAAS,OACTC,WAAW,IACXC,MAAOtB,EAAkBW,EAASA,EAAOV,UAAOsB,IAE/CZ,EAASA,EAAOa,KAAO,YE5C3BC,EAAgBC,IAAMC,mBAAkCJ,GCK/DK,EAAM,8BAA8BC,MAAM,IAYnCC,EAAY,SAAC,GAQH,IAPrBC,EAOoB,EAPpBA,KACAC,EAMoB,EANpBA,MACAC,EAKoB,EALpBA,WACAC,EAIoB,EAJpBA,QACAC,EAGoB,EAHpBA,gBACAC,EAEoB,EAFpBA,UACAC,EACoB,EADpBA,OAEMC,EAAMZ,IAAMa,SADE,EAGQb,IAAMc,SAAS,IAHvB,mBAGbC,EAHa,KAGLC,EAHK,KAIdC,EAAWF,EAAOG,OAElBC,EAAanB,IAAMoB,WAAWrB,GACpCC,IAAMqB,WAAU,WACd,IAAMC,EAAM,IAAIC,yBAAyBf,GAAWD,GAOpD,OANAe,EAAIE,MAAQC,gBAAgBC,YAAYC,MAAK,SAAAH,GAAK,MAAmB,UAAfA,EAAMI,QACxDvB,IACFiB,EAAIjB,KAAOA,GAEbiB,EAAIM,KAAO,QACXC,OAAOJ,gBAAgBK,MAAMR,GACtB,kBAAMO,OAAOJ,gBAAgBM,YACnC,CAAC1B,EAAMG,EAASD,EAAYY,IAE/BnB,IAAMqB,WAAU,WACd,IAAMlC,EAAMoB,EAAWJ,MAAM,IAAIc,GAC7BL,EAAIoB,UACN9B,EACG+B,QAAO,SAACnC,GAAD,OAAUA,IAASX,KAC1B+C,SAAQ,SAACpC,GAAD,OACPc,EAAIoB,QAAQG,iBAAiBC,qBAAqB,CAChDjD,IAAKW,EACLuC,KAAM,WAGZzB,EAAIoB,QAAQG,iBAAiBG,uBAAuB,CAClDnD,MACAkD,KAAM,WAGT,CAACpB,EAAUV,EAAYC,EAASH,IAEnCL,IAAMqB,WAAU,WACd,IAAMkB,EAAQ,SAAC,GAAkB,IAAhBpD,EAAe,EAAfA,IACXe,EAAIsC,SAASrD,KACGoB,EAAWJ,MAAM,IAAIc,KACrB9B,EACZ8B,IAAaV,EAAWW,OAAS,EACnCR,IAEAM,GAAU,SAACyB,GAAD,OAAOA,EAAItD,KAGvBwB,EAAOI,EAAS5B,KAKtB,OADA0C,OAAOa,iBAAiB,QAASH,GAC1B,WACLV,OAAOc,oBAAoB,QAASJ,MAErC,CAAC5B,EAAQD,EAAWO,EAAUV,EAAYS,EAAWD,EAAQP,IAEhE,IAAMoC,EAAqBnC,EAA8BF,EAAWJ,MAAM,IAAI0C,WAAU,SAACC,EAAYC,GAAb,OAA6BtC,EAAgBN,MAAM,IAAI4C,KAAiBD,UAAnHjD,EAG7C,OACE,kBAAChB,EAAA,EAAD,CACEoC,SAAS,WACT1B,MAAM,OACNC,OAAO,OACPV,QAAQ,OACRC,cAAc,SACdiE,WAAW,UAEX,kBAACnE,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMkE,OAAO,QAC7C,kBAAC,EAAD,CACErE,KAAM2B,EAAWJ,MAAM,IAAInB,KAAI,SAACc,EAAMZ,GACpC,OAAKoB,QAA+BT,IAAtB+C,GAAmC1D,IAAU0D,GAAqB1D,GAAS+B,EAChF,CACLnB,OACAvB,KAAMH,EAAWM,YAEV4B,GAAWpB,EAAQ+B,EAGrB,CACLnB,OACAvB,KAAOW,EAAQ+B,EAAW7C,EAAWK,QAAUL,EAAWI,YAJ5D,QAUR,kBAACK,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMkE,OAAO,QAC7C,kBAAC,EAAD,CACErE,KAAM4B,EAASL,MAAM,IAAInB,KAAI,SAACc,EAAMZ,GAChC,MAAO,CACLY,OACAvB,KAAMH,EAAWK,gBAKzB6B,GACA,kBAACzB,EAAA,EAAD,CAAKqE,WAAW,OAAOC,SAAS,OAAOC,UAAU,WAC/C,kBAAC,IAAD,CACEC,YAAa,SAACC,GACZ1C,EAAIoB,QAAUsB,GAEhBC,SAAU,aACVC,WAAY,kB,QF1HlBC,EAAYC,EAAQ,IACpBC,EAASD,EAAQ,K,SAElBrF,K,kBAAAA,E,YAAAA,E,aAAAA,M,KA8BE,IAAMuF,EAAeC,YAI1B,CACEC,GAAI,UACJC,QAAS1F,EAAM2F,KACfC,QAAS,GAETC,QAAM,mBACD7F,EAAM2F,KAAO,CACVG,GAAI,CACAC,QAAS/F,EAAM2F,KACfK,KAAMhG,EAAMiG,QAJlB,cAODjG,EAAMiG,KAAO,CACVC,MAAO,CACHC,IAAK,CACDC,OAAQpG,EAAM2F,KACdU,QAAS,OAXnB,cAeDrG,EAAMsG,QAAU,CACbJ,MAAO,CACHK,IAAMvG,EAAM2F,QAjBlB,KA4CH,IAAMa,EAAe,SAAC,GAA4D,IAA1DxE,EAAyD,EAAzDA,KAAiByE,EAAwC,EAAnDC,UAAmD,EAClE/E,IAAMc,UAAqB,kBAZjD,SAAyBkE,GAEvB,IADA,IAAMC,EAAQD,EACLE,EAAID,EAAM/D,OAAS,EAAGgE,EAAI,EAAGA,IAAK,CACvC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCK,EAAON,EAAMC,GACjBD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKI,EAEf,OAAON,EAI8CO,CAAa,GAAD,mBAC5DV,GAD4D,YAE5DA,GAF4D,YAG5DA,QAHEC,EAD+E,sBAOpE/E,IAAMc,SAAS,GAPqD,mBAO/EoE,EAP+E,KAO5EO,EAP4E,KAQhFC,EAAWX,EAAUG,EAAIH,EAAU7D,QAR6C,EAUhEyE,YAASlC,GAAxBmC,EAV+E,sBAWnED,YAAShC,GAArBkC,EAX+E,sBAarDC,YAAWlC,GAb0C,mBAatEmC,EAbsE,KAa7EC,MAAgBC,EAb6D,KAetF,OAAIF,IAAU1H,EAAM2F,KACX,kBAAC,EAAD,CACL7E,IAAK+F,EACL5E,OAAO,EACPD,KAAMA,EACNE,WAAYmF,EAASjB,OACrBjE,QAASkF,EAASQ,SAClBxF,UAAW,WACTuF,EAAK,CACH1H,KAAM,YAERqH,IACAH,GAAK,SAAAP,GAAC,OAAIA,EAAI,MAEhBvE,OAAQ,SAACwF,GACHA,EAASjF,OAAS,GACpBkF,QAAQC,IAAR,UAAeX,EAASQ,SAAxB,YAAoCR,EAASjB,OAA7C,aAAwD0B,EAAxD,eACFF,EAAK,CACH1H,KAAM,SAERsH,OAIKE,IAAU1H,EAAMsG,QAClB,kBAAC9F,EAAA,EAAD,CAAKoC,SAAS,QAAQ1B,MAAM,OAAOC,OAAO,OAAO8G,MAAO,CAACC,gBAAiB,WAE1E,kBAAC1H,EAAA,EAAD,CAAKC,QAAQ,OAAOkE,WAAW,SAASwD,eAAe,SAASvF,SAAS,QAAQ1B,MAAM,OAAOC,OAAO,OAAO8G,MAAO,CAACC,gBAAiB,QAC1I,kBAAC1H,EAAA,EAAD,CAAKe,MAAM,QAAQF,SAAS,QAAQgG,EAASjB,U,kBG/H/BgC,QACW,cAA7B5E,OAAO6E,SAASC,UAEe,UAA7B9E,OAAO6E,SAASC,UAEhB9E,OAAO6E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCyCG,WAAO,IAAD,EACO9G,IAAMc,SAjB5B,yPAgBe,mBAChBiG,EADgB,KACPC,EADO,OAEChH,IAAMc,SAAS,GAFhB,mBAEhBT,EAFgB,KAEV4G,EAFU,OAGOjH,IAAMc,UAAS,GAHtB,mBAGhBoG,EAHgB,KAGPC,EAHO,OAMKnH,IAAMc,SAAmB,IAN9B,mBAMhBsG,EANgB,KAMRC,EANQ,KAOvBhG,qBAAU,WACR,sBAAC,sBAAAiG,EAAA,kEACCD,EADD,SAvCI,IAAIE,SACP,SAAUC,EAASC,GACf,IACI3D,EADA4D,EAAQ7F,OAAOJ,gBAGnBqC,EAAK6D,aAAY,WACoB,IAA7BD,EAAMhG,YAAYR,SAClBsG,EAAQE,EAAMhG,aACdkG,cAAc9D,MAEnB,OA6BR,YACmC,SAAAtC,GAAK,OAAIA,GAD5C,KAC0D,SAAAqG,GAAC,MAAe,UAAXA,EAAEjG,MADjE,KACuF,SAAAiG,GAAC,OAAIA,EAAEC,MAD9F,YAC+B9I,IAD/B,MACmDiD,OADnD,MACmFjD,IADnF,+DAAD,KAGC,IAXoB,MAYEgB,IAAMc,SAA6B,iBAZrC,mBAYhBU,EAZgB,KAYTuG,EAZS,KAcjBhD,EAAYgC,EAAQ5G,MAAM,MAAM8B,QAAO,SAAA+F,GAAI,OAAIA,KAAMhJ,KAAI,SAAAgJ,GAC7D5B,QAAQC,IAAI2B,GADyD,MAE7CA,EAAK7H,MAAM,KAAKnB,KAAI,SAAAiJ,GAAG,OAAIA,EAAIC,UAFc,mBAGrE,MAAO,CACLhC,SAJmE,KAKnEzB,OALmE,KAKpD0D,wBAInB,OAAIjB,EAEA,kBAACnH,EAAcqI,SAAf,CAAwBpC,MAAOxE,GAC7B,kBAAC,EAAD,CAAcnB,KAAMA,EAAM0E,UAAWA,KAKvC,kBAAClG,EAAA,EAAD,CACEoC,SAAS,WACToH,IAAI,OACJC,OAAO,OACPC,KAAK,OACLC,MAAM,OACN1J,QAAQ,OACRC,cAAc,MACdyH,eAAe,gBAEf,kBAAC3H,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAASiE,WAAW,OACpD,kBAACnE,EAAA,EAAD,CAAK4J,EAAE,OAAO/I,SAAS,QAAvB,sBACA,kBAACgJ,EAAA,EAAD,CACE1C,MAAOe,EACPxD,SAAU,SAACoF,GACT,GAAIA,EAAElE,QAAUkE,EAAElE,OAAOuB,MAAO,CAC9B,IAAMA,EAAQ2C,EAAElE,OAAOuB,MACvBgB,EAAWhB,OAIjB,kBAACnH,EAAA,EAAD,CAAK4J,EAAE,OAAO/I,SAAS,QAAvB,wCACA,kBAACb,EAAA,EAAD,CAAKU,MAAM,SAAX,gBACgBc,EACd,kBAACuI,EAAA,EAAD,CACE5C,MAAO3F,EACPkD,SAAU,SAACsF,EAAOC,GAAR,OAAqB7B,EAAQ6B,IACvCC,aAAc,EACdC,kBAAgB,kBAChBC,kBAAkB,OAClBC,KAAM,GACNC,IAAK,GACLC,IAAK,KAGT,kBAACvK,EAAA,EAAD,KACE,kBAACwK,EAAA,EAAD,CACIrD,MAAOxE,GAAS,gBAChB+B,SAAU,SAAC+F,GAAD,OAAOvB,EAAQuB,EAAE7E,OAAOuB,SAElC,kBAACuD,EAAA,EAAD,CAAUC,UAAQ,EAACxD,MAAO,iBAA1B,iBACCoB,EAAOpI,KAAI,SAACwC,EAAO0D,GAAR,OAAc,kBAACqE,EAAA,EAAD,CAAUpK,IAAK+F,EAAGc,MAAOxE,GAAQA,QAGjE,kBAACiI,EAAA,EAAD,CAAQC,QAAS,kBAAMvC,GAAW,KAAlC,aDpHM,MAASwC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.44e34afc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/success.a8e58690.mp3\";","module.exports = __webpack_public_path__ + \"static/media/fail.23730a41.mp3\";","import React from \"react\";\nimport { Box, Paper } from \"@material-ui/core\";\n\nexport enum LetterType {\n  Faded,\n  Correct,\n  Highlight,\n}\n\ntype Letter = {\n  char: string;\n  type: LetterType;\n};\n\ntype WordRowProps = {\n  word: (Letter | undefined)[];\n};\n\nconst letterTypeToColor = (type: LetterType | undefined) => {\n  switch (type) {\n    case LetterType.Faded:\n      return \"#eee\";\n    case LetterType.Correct:\n      return \"green\";\n    case LetterType.Highlight:\n      return \"brown\";\n    default:\n      return \"#eee\";\n  }\n};\n\nexport const WordRow = ({ word }: WordRowProps) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"row\">\n      {word.map((letter, index) => {\n        return (\n          <Box key={index} paddingRight=\"7px\">\n            <Paper elevation={3}>\n              <Box\n                width=\"35px\"\n                height=\"55px\"\n                textAlign=\"center\"\n                fontSize=\"45px\"\n                lineHeight=\"1\"\n                color={letterTypeToColor(letter ? letter.type : undefined)}\n              >\n                {letter ? letter.char : \"_\"}\n              </Box>\n            </Paper>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Machine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { Box } from \"@material-ui/core\";\nimport { WordRound } from './WordRound';\nimport useSound from \"use-sound\";\n// @ts-ignore\nimport Jabber from 'jabber';\n\nconst successFx = require('./sounds/success.mp3');\nconst failFx = require('./sounds/fail.mp3');\n\nenum State {\n  Success = 'SUCCESS',\n  Fail = 'FAIL',\n  Play  = 'PLAY',\n}\n\ninterface StateSchema {\n    states: {\n        [State.Play]: {\n          states: {\n            [State.Fail]: {},\n          }\n        },\n        [State.Fail]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n        [State.Success]: {\n          states: {\n            [State.Play]: {},\n          }\n        };\n    };\n}\n\nexport type StateEvent =\n    | { type: 'success' }\n    | { type: 'fail' };\n\nexport const stateMachine = Machine<\n    {},\n    StateSchema,\n    StateEvent\n>({\n    id: 'success',\n    initial: State.Play,\n    context: {\n    },\n    states: {\n        [State.Play]: {\n            on: {\n                success: State.Play,\n                fail: State.Fail,\n            },\n        },\n        [State.Fail]: {\n            after: {\n                800: {\n                    target: State.Play,\n                    actions: [],\n                },\n            },\n        },\n        [State.Success]: {\n            after: {\n                1000: State.Play,\n            },\n        },\n    },\n});\n\ntype Sentence = {\n  original: string;\n  target: string;\n};\n\nexport type DictateRoundProps = {\n  sentences: Sentence[];\n  rate: number;\n};\n\nfunction shuffleArray<T>(originalArray: T[]): T[] {\n  const array = originalArray;\n  for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n  return array;\n}\n\nexport const DictateRound = ({ rate, sentences: inputSentences }: DictateRoundProps) => {\n  const [sentences] = React.useState<Sentence[]>(() => shuffleArray([\n    ...inputSentences, \n    ...inputSentences, \n    ...inputSentences\n  ]));\n\n  const [i, setI] = React.useState(0);\n  const sentance = sentences[i % sentences.length];\n\n  const [playSuccess] = useSound(successFx);\n  const [playFail] = useSound(failFx);\n\n  const [{ value: state }, send] = useMachine(stateMachine);\n\n  if (state === State.Play) {\n    return <WordRound\n      key={i} \n      blind={true}\n      rate={rate}\n      targetWord={sentance.target}\n      sayWord={sentance.original}\n      onSuccess={() => {\n        send({\n          type: 'success'\n        });\n        playSuccess();\n        setI(i => i + 1);\n      }}\n      onFail={(failWith) => {\n        if (failWith.length > 1)\n          console.log(`${sentance.original} ${sentance.target}\\n${failWith} <-- error`)\n        send({\n          type: 'fail'\n        })\n        playFail();\n        // setI(i => i + 1);\n      }}\n    />\n  } else if (state === State.Success) {\n    return <Box position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'green'}} />;\n  } else {\n    return <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" position=\"fixed\" width=\"100%\" height=\"100%\" style={{backgroundColor: 'red'}}> \n      <Box color=\"white\" fontSize=\"50px\">{sentance.target}</Box>\n    </Box>;\n  }\n};\n","import React from \"react\";\n\nexport const SpeechContext = React.createContext<string | undefined>(undefined);\n\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport Keyboard from \"react-simple-keyboard\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport { WordRow, LetterType } from \"./LetterRow\";\nimport { SpeechContext } from \"./speech\";\n\nconst abc = \"abcdefghijklmnopqrstuvwxyz \".split(\"\");\n\ntype WordRoundProps = {\n  rate?: number;\n  blind: boolean;\n  targetWord: string;\n  sayWord?: string;\n  commonErrorWord?: string;\n  onSuccess: () => void;\n  onFail: (failWith: string) => void;\n};\n\nexport const WordRound = ({\n  rate,\n  blind,\n  targetWord,\n  sayWord,\n  commonErrorWord,\n  onSuccess,\n  onFail,\n}: WordRoundProps) => {\n  const ref = React.useRef<any>();\n  \n  const [buffer, setBuffer] = React.useState('');\n  const position = buffer.length;\n\n  const speechLang = React.useContext(SpeechContext);\n  React.useEffect(() => {\n    const msg = new SpeechSynthesisUtterance(sayWord || targetWord);\n    msg.voice = speechSynthesis.getVoices().find(voice => voice.lang === 'tr-TR')!;\n    if (rate) {\n      msg.rate = rate;\n    }\n    msg.lang = 'en-UK';\n    window.speechSynthesis.speak(msg);\n    return () => window.speechSynthesis.cancel();\n  }, [rate, sayWord, targetWord, speechLang]);\n\n  React.useEffect(() => {\n    const key = targetWord.split(\"\")[position];\n    if (ref.current) {\n      abc\n        .filter((char) => char !== key)\n        .forEach((char) =>\n          ref.current.physicalKeyboard.handleHighlightKeyUp({\n            key: char,\n            code: \"key\",\n          })\n        );\n      ref.current.physicalKeyboard.handleHighlightKeyDown({\n        key,\n        code: \"key\",\n      });\n    }\n  }, [position, targetWord, sayWord, rate]);\n\n  React.useEffect(() => {\n    const onKey = ({ key }: any) => {\n      if (abc.includes(key)) {\n        const targetKey = targetWord.split(\"\")[position];\n        if (targetKey === key) {\n          if (position === targetWord.length - 1) {\n            onSuccess();\n          } else {\n            setBuffer((p) => p + key);\n          }\n        } else {\n          onFail(buffer + key);\n        }\n      }\n    };\n    window.addEventListener(\"keyup\", onKey);\n    return () => {\n      window.removeEventListener(\"keyup\", onKey);\n    };\n  }, [onFail, onSuccess, position, targetWord, setBuffer, buffer, sayWord]);\n\n  const highlightPosition = !commonErrorWord ? undefined : targetWord.split('').findIndex((targetChar, targetIndex) => commonErrorWord.split('')[targetIndex] !== targetChar);\n\n\n  return (\n    <Box\n      position=\"absolute\"\n      width=\"100%\"\n      height=\"100%\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      <Box display=\"flex\" flexDirection=\"row\" margin=\"10px\">\n        <WordRow\n          word={targetWord.split(\"\").map((char, index) => {\n            if (!blind && highlightPosition !== undefined && index === highlightPosition && index >= position) {\n              return {\n                char,\n                type: LetterType.Highlight,\n              };\n            } else if (blind && !(index < position)) {\n              return undefined;\n            } else {\n              return {\n                char,\n                type: (index < position ? LetterType.Correct : LetterType.Faded),\n              };\n            }\n          })}\n        />\n      </Box>      \n      <Box display=\"flex\" flexDirection=\"row\" margin=\"10px\">\n        <WordRow\n          word={sayWord!.split(\"\").map((char, index) => {\n              return {\n                char,\n                type: LetterType.Correct,\n              };\n          })}\n        />\n      </Box>\n      {!blind && (\n        <Box paddingTop=\"80px\" paddingX=\"80px\" alignSelf=\"stretch\">\n          <Keyboard\n            keyboardRef={(r) => {\n              ref.current = r;\n            }}\n            onChange={() => {}}\n            onKeyPress={() => {}}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect } from \"react\";\nimport \"react-simple-keyboard/build/css/index.css\";\nimport {\n  Box,\n  Button,\n  TextareaAutosize,\n} from \"@material-ui/core\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { DictateRound } from \"./DictateRound\";\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { SpeechContext } from \"./speech\";\n\n\nfunction getSpeech(): Promise<SpeechSynthesisVoice[]> {\n  return new Promise(\n      function (resolve, reject) {\n          let synth = window.speechSynthesis;\n          let id: NodeJS.Timeout;\n\n          id = setInterval(() => {\n              if (synth.getVoices().length !== 0) {\n                  resolve(synth.getVoices());\n                  clearInterval(id);\n              }\n          }, 10);\n      }\n  )\n}\n\nconst demo = `derim;I say\ndersin;you say\nder;He says\nderiz;We say\ndersiniz;Yall say\nderler;They say\n\ndiyorum; I am saying\ndiyorsun; You are saying\ndiyor; He is saying\ndiyoruz; We are saying\ndiyorsunuz; Yall are saying\ndiyorlar; They are saying\n\n`;\n\nexport const App = () => {\n  const [payload, setPayload] = React.useState<string>(demo);\n  const [rate, setRate] = React.useState(1);\n  const [dictate, setDictate] = React.useState(false);\n\n\n  const [voices, setVoices] = React.useState<string[]>([]);\n  useEffect(() => {\n    (async () =>  {\n      setVoices((await getSpeech()).map(voice => voice).filter(v => v.lang === 'tr-TR').map(v => v.name))\n    })();\n  }, []);\n  const [voice, setLang] = React.useState<string | undefined>('Default voice');\n\n  const sentences = payload.split(\"\\n\").filter(line => line).map(line => {\n    console.log(line)\n    const [first, second] = line.split(\";\").map(sen => sen.trim());\n    return {\n      original: first,\n      target: second.toLocaleLowerCase(),\n    }\n  })\n\n  if (dictate) {\n    return (\n      <SpeechContext.Provider value={voice}>\n        <DictateRound rate={rate} sentences={sentences} />\n      </SpeechContext.Provider>\n    );\n  }\n    return (\n      <Box\n        position=\"absolute\"\n        top=\"10px\"\n        bottom=\"10px\"\n        left=\"10px\"\n        right=\"10px\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-around\"\n      >\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"top\">\n          <Box m=\"10px\" fontSize=\"25px\">Practice spelling:</Box>\n          <TextareaAutosize\n            value={payload}\n            onChange={(e) => {\n              if (e.target && e.target.value) {\n                const value = e.target.value;\n                setPayload(value);\n              }\n            }}\n          />\n          <Box m=\"10px\" fontSize=\"25px\">Practice writing down when dictated:</Box>\n          <Box width=\"200px\">\n            Speech Rate: {rate}\n            <Slider\n              value={rate}\n              onChange={(event, newValue) => setRate(newValue as number)}\n              defaultValue={1}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={0.1}\n              min={0.3}\n              max={2}\n            />\n          </Box>\n          <Box>\n            <Select\n                value={voice || 'Default Voice'}\n                onChange={(x) => setLang(x.target.value as any)}\n              >\n                <MenuItem disabled value={'Default voice'}>Default Voice</MenuItem>\n                {voices.map((voice, i) => <MenuItem key={i} value={voice}>{voice}</MenuItem>)}\n            </Select>\n          </Box>\n          <Button onClick={() => setDictate(true)}>Start</Button>\n        </Box>\n      </Box>\n    );\n};\n"],"sourceRoot":""}